                                                                                MODULE 1 -INTRODUCTION



*Concepts and characterstics of DBMS:
 ------------------------------------


* Data==> Raw facts,unprocessed facts. 
  Eg: teja, 75 B+

* Information ==>Refined dats.
  Eg: teja has passed with 75% and obtained B+ grade.

* Database  ==>collection of related data.

*Metadata ==> Definition of data(more information about data).
  Eg:constraints


*Functionalities of DBMS:

  Define      ==>specifying the datatype,structure and constraints for the data to be stored.
  Construct   ==>process of storing data on some storage medium.
  Manipulate  ==>Quering the database to retrieve specific data, updating database and generating database.
  Share        ==>Allows multiple users and programs to access the database concurrently.



*Properities of DBMS:

  *A database represents some ascepts of real world.
  *A database is a logically coherent collection of data with some meaning.
  *A database is designed , bult and  populated with data for a specific purpose.


*Need of DBMS:

  *Processing quiries and object management.
  *controlling redundancy and inconsistency.
  *Efficient memory management and indexing.
  *concurrency control and Transcation management.
  *Access control and ease in accessing data.
  *Integrity constraints.


*Characteristics of DBMS:

  *Self Describing nature of a database system.
  *Insulation b/w programs and data and data abstraction.
  *Support of multiple views of data.
  *sharing of data and  multiuser transcation processing.


*Advantages of using DBMS:

  *Controlling Redundancy.
  *Restricting unauthorized access.
  *PRoviding persistent storage for program objects.
  *Providing Backup and Recovery.
  *providing multiple user Interfaces.
  *Representing complex relationships among Data.
  *Enforcing Integrity constraints.
  *permitting Inferencing and actions using rules.



*Disadvantages of using DBMS:

  *The cost of Hardware and Software of DBMS are quite high,  which increases the budget of the organization.
  *Most DBMS are Often complex , so training users  to use the DBMS  is required.
  *DBMS cannot perform sophiscated calculations.



*When not to use DBMS:

  *Overhead  costs of using Database Management system.
    *High initial investment.
    *Overhead for providing security.
    *Concurrency control and recovery.











*History and Evolution of Database:
----------------------------------


  *Types of Database:

    *Hierarchical Database:

      *Tree-like structure.
      *Top-down or Bottom-up structure.
      *parent-child relationship-Parents may have many childern,but childern have only one parent.

  *  Network Database:

    *Grap structure accessed through several paths.
    *Each child can have multiple parents.
    *More complex relationships.


  *Relational Database:

    *Easiset and most wiedly used model.
    *Normalize data in rows and columns of the tables.
    *Fixed structures and manipulated using SQL.



  *Object-oriented database:

    *Data stored in the form of objects.
    *classes with data within it.
    *stores both, datamembers values and operation



*Database system Archiecture(Three tire archiecture):
 ---------------------------------------------------

  *Users of DBMS:
    *Application programmers ==>Application programmers write programs in various programming languages to intercat with databases.

   *Database Adminstrator ==>Database admin is responsible for managing the entire DBMS system.

   *End-users ==>The endusers are the people who interact with database management system. They conduct various operations on databses like reteriving,updating and deleting.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                           2.DATA MODELLING


2.1 RELATIONAL RELATIONAL DATABASE MODEL:

*Relational database model uses concept of mathematical relations.
*First commerical implementation - ORACAl SQL, SQL/DS SYSTEM(IBM).
* standard commerical RDBMS is SQL.

Basic Terminology:
1. Relational schema - set of all  columns titles  in the table.
2. Relational Database schema - various tables in a Database.
3. Relation state -no.of tuples (or) no.of rows in the table.
4. Cardinality - Total no.of rows in the table.
5. Tuple - row ---->
6. Attribute - column |
7. Domain -set of range values of a column.
8. Atomcity - unable to split the values like (eg. joining date),if we split joining date ,there is no meaning.
9. NULL values - whose value doesnt NULL.
10. Sorted & unsorted Values -



2.2 ENTITY RELATIONALSHIP MODEL:

Designing a database: 
  1. ENtity relationalship model -Identifying enity and relations
  2.Normalization - Refinement of database designing.



* corelational of ER model and Realational Model
      ER model                         Relational Model
      Entity set                       Table
      Entity                           Row
      Attribute                        column





2.3 TYPES OF ATTRIBUTES AND THEIR SYMBOLS:

*Attributes describes the properities of entity of which they are associated.
   *simple
  *composite
  *single value
  *Multi value
  *stored
  *Derived



*simple attribute - cannot de divided into simpler components (eg:age, rollno).
*Composite attribute - can be divided into simpler components (eg: name,address).
*single value attribute- can have only a single value(eg rolll no, dateofbirth).
*Multi value attribute - can have multiple values(eg:contact number, email address).
*stored attribute - attribute that is  or needs to be stored permanently(eg: roll no,name).
*Derived attribute -attribute that can be calculated based on other attributes(eg:age can be calculated based on DOB).







2.4 CONNECTIVITY OF A RELATIONSHIPS:

*The connectivity of a relationship  describes the mapping of associated  entity instances  in the relationship.
  *one -to-one (1:1)
  *one-to-many (1:m)
  *many-to-one (m:1)
  *many-to-many (m:m)

  
